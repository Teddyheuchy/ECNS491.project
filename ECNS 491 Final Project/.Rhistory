a[i] = mis1 |> count(farmers[i]) |>
filter(n>2) |>
arrange(desc(n))
}
farmers = mis3$`Farmer Name`
a = 0
for(i in 1:length(farmers))              #loop through all of the columns to see what the unique
{                                     # entries are for each column to see what needs to be cleaned
a[i] = mis3 |> count(farmers[i]) |>
filter(n>2) |>
arrange(desc(n))
}
farmers = mis3$`Farmer Name`
entryNumbers = farmers |>
count()
farmers = mis3$`Farmer Name`
entryNumbers = farmers |>
summarise()
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>1)
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2)
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2) |>
arragne(desc(n()))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2) |>
arrange(desc(n()))
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n())
filter(n()>=2) |>
arrange(desc(n()))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n())
filter(c>=2) |>
arrange(desc(c))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n()) |>
filter(c>=2) |>
arrange(desc(c))
View(entryNumbers)
legal = n_distinct(entryNumbers$`Farmer Name`)
illegal = length(entryNumbers) - legal
legal = length(unique(entryNumbers$`Farmer Name`))
illegal = length(entryNumbers) - legal
legal = length(unique(entryNumbers$`Farmer Name`))
illegal = length(entryNumbers) - legal
tot = length(entryNumbers)
tot = length(entryNumbers$`Farmer Name`)
numIllegal = tot - legal
allTotal = length(mis3$`Farmer Name`)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n()) |>
filter(c>=2) |>
arrange(desc(c))
legal = n_distinct(entryNumbers$`Farmer Name`)
tot = length(entryNumbers$`Farmer Name`)
numIllegal = tot - legal
allTotal = length(mis3$`Farmer Name`)
percentFraud = numIllegal/allTotal * 100
percentFraud
cat("Percentage of fraudulent claims = " + percentFraud)
cat("Percentage of fraudulent claims = " + as.string(percentFraud))
cat("Percentage of fraudulent claims = " + as.name(percentFraud))
cat("Percentage of fraudulent claims = " + str(percentFraud))
cat("Percentage of fraudulent claims = " + str(percentFraud))
percentFraud
View(entryNumbers)
View(mis1)
View(mis)
#removing "BEN" and "BHAI" from original dataset
remSuffix = sub("BEN+","",mis1$`Farmer Name`)
remSuffix2 = sub("BHAI","",remSuffix)
remSuffix2 = sub("BHAI+","",remSuffix)
#removing "BEN" and "BHAI" from original dataset
mis2 = mis1
#removing "BEN" and "BHAI" from original dataset
mis9 = mis1
mis9$`Farmer Name` = sub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = sub("BHAI+","",mis9$`Farmer Name`)
View(mis9)
mis9$`Farmer Name` = gsub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = gsub("BHAI+","",mis9$`Farmer Name`)
View(mis9)
#removing "BEN" and "BHAI" from original dataset
mis9 = mis1
mis9$`Farmer Name` = gsub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = gsub("BHAI+","",mis9$`Farmer Name`)
entryNumbers2 = mis9 |>                         #Using the cleaned data set
group_by(`Farmer Name`) |>                    #group entries by the farmer name
mutate(c = n()) |>                            #add a column to the data for number of entries for each farmer
filter(c>=2) |>                               #take out any farmers with only one entry
arrange(desc(c))                              #list them in descending order
legal2 = n_distinct(entryNumbers2$`Farmer Name`)#each farmer can have one legal entry, count unique names in "entryNumbers"
tot2 = length(entryNumbers2$`Farmer Name`)      #see how many total entries there are in "entryNumbers"
numIllegal2 = tot2 - legal2                     #find how many duplicate entries after removing their first legal entry
allTotal2 = length(mis9$`Farmer Name`)           #see how many entries are in the original data (cleaned version)
percentFraud2 = numIllegal2/allTotal2 * 100      #divide illegal entries by total to find percentage of fraudulent entries
percentFraud2
fraudDif = percentFraud2 - percentFraud
fraudDif
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(sf)
library(tidyverse)
library(tmap)
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
#dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area_stations = sum(st_area(sta_5km))
area_alameda = st_area(alameda)
bart_alameda = area_stations/area_alameda
("Percentage of Alameda area within 5km of BART stations:")
bart_alameda
source("~/.active-rstudio-document", echo=TRUE)
?lm()
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(homes$SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(houses$SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(houses$SalePrice ~ houses$age + houses$area + houses$age*houses$area + houses$age^2 + houses$area^2)
summary(tmp)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
summary(tmp)
library(tidymodels)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
summary(tmp)
#2
tmp2  = augment(tmp,data = houses)
summary(tmp2)
sd(tmp2$.resid)
View(houses)
View(ames)
tidy(summary(tmp2))
#3
chal = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AnvGrd^2, data = houses)
#3
chal = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
?augment()
source("~/Desktop/Fall/ECNS 491/Assignments/Assignment 8/Assignment8Script.R", echo=TRUE)
sd(my_result$.resid)
View(houses)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2 + , data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2 + , data = houses)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + age^3 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + age^30 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + Lot_Area + age*area + age^2 + area^2 + age^3 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
my_linear_model_2 = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
my_result_2 = augment(my_linear_model_2, data = houses)
sd(my_result_2$.resid)
train_result_1 = augment(linear_model_1, data = houses_train, newdata = houses_test)
set.seed(8)
data_split   = initial_split(houses, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
train_result_1 = augment(linear_model_1, data = houses_train, newdata = houses_test)
sd(train_result_1$.resid)
train_result_2 = augment(my_linear_model, data = houses_train, newdata = houses_test)
sd(train_result_2$.resid)
train_result_3 = augment(my_linear_model_2, data = houses_train, newdata = houses_test)
sd(train_result_3$.resid)
install.packages("readxl")
install.packages("xlxs")
library(xlxs)
library(readxl)
read_xls("fullHistoryGas.xls",sheet = "Data 1")
setwd("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project")
read_xls("fullHistoryGas.xls",sheet = "Data 1")
usAreas = read_xls("fullHistoryGas.xls",sheet = "Data 1")
View(usAreas)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
View(usAreas)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
View(allGrades_all)
View(allGrades_conventional)
View(allGrades_reformulated)
class(regular_all)
View(midgrade_all)
View(midgrade_conventional)
View(midgrade_reformulated)
View(regular_conventional)
View(regular_reformulated)
View(premium_all)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
for(item in dataList){
tmp = item[3:nrow(item),]
colnames(tmp) = item[2]
item = tmp
}
for(item in dataList){
tmp = item[3:nrow(item)]
colnames(tmp) = item[2]
item = tmp
}
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
library(readr)
library(readxl)
library(tidyverse)
library(sf)
library(tmap)
states = st_read("USstates/s_22mr22.shp")
#plot(states)
qtm(states)
tmap_mode("view")
qtm(states)
#plot(states)
# tmap_mode("view")
# qtm(states)
st_layers(states)
qtm(states$STATE)
str(states)
qtm(states$NAME)
qtm(states)
install.packages(usmap)
library(usmap)
install.packages("usmap")
library(usmap)
library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(sf)
library(tmap)
library(ggplot2)
library(usmap)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
plot_usmap(include = .south_region, labels = TRUE)
plot_usmap(include = .east_north_central, labels = TRUE)
plot_usmap(include = .east_south_central, labels = TRUE)
plot_usmap(include = .midwest_region, labels = TRUE)
plot_usmap(include = .mid_atlantic, labels = TRUE)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
view(regular_conventional)
class(regular_conventional)
?subset
regular_conventional = regular_conventional[3:,]
regular_conventional = regular_conventional[3:,:]
regular_conventional  |>
filter(!row_number() %in% 1)
regular_conventional  |>
filter(!row_number() %in% 1) |>
rownames = regular_conventional[1]
test = regular_conventional  |>
filter(!row_number() %in% 1) |>
rownames = regular_conventional[1]
test = regular_conventional  |>
filter(!row_number() %in% 1) |>
rownames = regular_conventional[1]
rnames = regular_conventional[1]
View(rnames)
rnames = regular_conventional[,1]
View(rnames)
rnames = regular_conventional[1,]
View(rnames)
rnames = regular_conventional[2,]
View(rnames)
row.names(regular_conventional) = rnames
View(regular_conventional)
class(rnames)
row.names(regular_conventional) = str(rnames)
View(regular_conventional)
row.names(regular_conventional) = NA
cnames = regular_conventional[2,]
column.names(regular_conventional) = cnames
colnames(regular_conventional) = cnames
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2))
View(regular_conventional)
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
mutate(week = as.Date(Date))
class(regular_conventional$Date)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date))
class(regular_conventional$Date)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date))
?as.Date()
library(lubridate)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date),
origin = as.Date("1990-01-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date),
origin = "1990-01-01")
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1990-01-01"))
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1900-01-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1870-01-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1950-01-01"))
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1950-01-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1950-06-01"))
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1980-06-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "2020-06-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "2030-01-01"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "2030-01-01"))
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1910-08-20"))
View(regular_conventional)
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1930-08-20"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = as.Date(Date,origin = "1930-08-20"))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date))
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
tramsform(Date = ymd(Date))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = ymd(Date))
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date))
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
cnames = regular_conventional[2,]
colnames(regular_conventional) = cnames
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date)) |>
transform(Date = ymd(Date))
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
cnames = regular_conventional[2,]
colnames(regular_conventional) = cnames
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date))
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
library(readr)
library(readxl)
library(tidyverse)
library(sf)
library(tmap)
library(ggplot2)
library(usmap)
library(lubridate)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1")
View(regular_conventional)
cnames = regular_conventional[2,]
colnames(regular_conventional) = cnames
regular_conventional = regular_conventional |>
filter(!row_number() %in% c(1,2)) |>
transform(Date = as.numeric(Date))
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
dir("USstates/s_22mr22.shp")
states = st_read("USstates/s_22mr22.shp") +
st_make_valid()
dir("USstates/s_22mr22.shp")
states = st_read("USstates/s_22mr22.shp") |>
st_make_valid()
#plot(states)
#tmap_mode("view")
qtm(states$NAME)
str(states)
tmap_mode("view")
qtm(states)
tmap_options(check.and.fix = TRUE)
qtm(states)
library(readxl)
################################################################################
#Wyatt Sigafoos
#ECNS 491
#Exploritory Analysis
#Final Project: Observe the recent behavior of domestic and foriegn gas prices
#November 10, 2022
################################################################################
#Step 1: Download and import both data files
#setwd("/Users/wyattsig/Desktop/ECNS 491 Final Project")
library(readr)
regular_conventional = read_excel("fullHistoryGas.xls",sheet = "Data 1")
View(regular_conventional)
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)), range = cell_rows(3:))
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)), range = cell_rows(3:))
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)))
View(regular_conventional)
?readxls()
?read_xls()
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)), col_names = cell_rows(2))
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)), col_names = FALSE)
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)))
View(regular_conventional)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)),skip = 2)
View(regular_conventional)
regular_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 2", col_types = c("date",rep("numeric",20)),skip = 2)
regular_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 2", col_types = c("date",rep("numeric",18)),skip = 2)
View(regular_reformulated)
regular_all = read_xls("fullHistoryGas.xls",sheet = "Data 3", col_types = c("date",rep("numeric",20)),skip = 2)
regular_all = read_xls("fullHistoryGas.xls",sheet = "Data 3", col_types = c("date",rep("numeric",28)),skip = 2)
midgrade_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 4", col_types = c("date",rep("numeric",20)),skip = 2)
midgrade_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 4", col_types = c("date",rep("numeric",21)),skip = 2)
midgrade_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 5", col_types = c("date",rep("numeric",20)),skip = 2)
midgrade_all = read_xls("fullHistoryGas.xls",sheet = "Data 6", col_types = c("date",rep("numeric",28)),skip = 2)
premium_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 8", col_types = c("date",rep("numeric",17)),skip = 2)
allGrades_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 10", col_types = c("date",rep("numeric",20)),skip = 2)
allGrades_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 11", col_types = c("date",rep("numeric",18)),skip = 2)
allGrades_all = read_xls("fullHistoryGas.xls",sheet = "Data 12", col_types = c("date",rep("numeric",28)),skip = 2)
View(allGrades_reformulated)
