tm_polygons(col = "pink") + tm_shape(stations_5km_int) + tm_dots()
map_alameda = tm_shape(alameda) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(sta_5km_int) + tm_dots()
map_alameda
map_alameda = tm_shape(alameda) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(sta_5km) + tm_dots()
map_alameda
map_alameda = tm_shape(sta_5km) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(sta_5km_int) + tm_dots()
map_alameda
alameda_join = st_join(alameda,stations_5km_proj)
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(sta_5km_int) + tm_dots()
map_alameda
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_dots()
map_alameda
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") +tm_dots()
map_alameda
alameda_join = st_join(alameda,stations_5km_int)
alameda_join = st_join(alameda,sta_5km_int)
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink")# + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda
counties2 = counties |>
cbind(area = units::set_units(st_area(counties), km^2))
alameda = counties2 |> filter(NAME == "Alameda")                       #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get bart station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))
sta_5km = st_union(alameda,stations_5km_proj)
sta_5km_int = st_intersection(alameda, sta_5km)
alameda_join = st_join(alameda,stations_5km_proj)
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))
sta_5km = st_union(alameda,stations_5km_proj)
sta_5km_int = st_intersection(alameda, sta_5km)
alameda_join = st_join(alameda,stations_5km_proj)
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(sta_5km) + tm_polygons(col = "blue") + tm_dots()
map_alameda
setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(sf)
library(tidyverse)
library(tmap)
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area = st_area(sta_5km)
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area_stations = st_area(sta_5km)
area_alameda = st_area(alameda)
bart_alameda = area_stations/area_alameda
bart_alameda
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area_stations = sum(st_area(sta_5km))
area_alameda = st_area(alameda)
bart_alameda = area_stations/area_alameda
bart_alameda
cat("Percentage of Alameda area in 5km of BART stations = " + bart_alameda)
cat("Percentage of Alameda area in 5km of BART stations = " + str(bart_alameda))
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area_stations = sum(st_area(sta_5km))
area_alameda = st_area(alameda)
bart_alameda = area_stations/area_alameda
("Percentage of Alameda area within 5km of BART stations:")
bart_alameda
counties = st_read("data/california_counties/CaliforniaCounties.shp") #I am going to try starting with clean objects
counties3 = counties |>                                               #for part 2 to avoid cluttering my code like above
cbind(area = units::set_units(st_area(counties), km^2))
alameda2 = counties2 |> filter(NAME == "Alameda")
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")      #pull protected areas from data file
stopifnot(st_crs(protected) == st_crs(alameda2))
protected_within = st_filter(protected, alameda, .predicate = st_within)
buffered_wintin = st_buffer(protected_within, dist = 1000)
union_buffered = st_union(alameda2,buffered_wintin)
counties = st_read("data/california_counties/CaliforniaCounties.shp") #I am going to try starting with clean objects
counties3 = counties |>                                               #for part 2 to avoid cluttering my code like above
cbind(area = units::set_units(st_area(counties), km^2))
alameda2 = counties2 |> filter(NAME == "Alameda")
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")      #pull protected areas from data file
stopifnot(st_crs(protected) == st_crs(alameda2))
protected_within = st_filter(protected, alameda, .predicate = st_within)
buffered_wintin = st_buffer(protected_within, dist = 1000)
union_buffered = st_union(alameda2,buffered_wintin)
map_protected = tm_shape(alameda2) + tm_borders(col = "black", lwd = 3) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
counties = st_read("data/california_counties/CaliforniaCounties.shp") #I am going to try starting with clean objects
counties3 = counties |>                                               #for part 2 to avoid cluttering my code like above
cbind(area = units::set_units(st_area(counties), km^2))
alameda2 = counties2 |> filter(NAME == "Alameda")
protected = st_read("data/protected_areas/CPAD_2020a_units.shp")      #pull protected areas from data file
stopifnot(st_crs(protected) == st_crs(alameda2))
protected_within = st_filter(protected, alameda, .predicate = st_within)
buffered_wintin = st_buffer(protected_within, dist = 1000)
union_buffered = st_union(alameda2,buffered_wintin)
map_protected = tm_shape(alameda2) + tm_borders(col = "black", lwd = 3, alpha = 0.1) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
map_protected = tm_shape(alameda2) + + tm_polygons(alpha = 0.5) + tm_borders(col = "black", lwd = 3, alpha = 0.1) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected = tm_shape(alameda2) + tm_polygons(alpha = 0.5) + tm_borders(col = "black", lwd = 3, alpha = 0.1) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
map_protected = tm_shape(alameda2) + tm_polygons(col = "gray", alpha = 0.01) + tm_borders(col = "black", lwd = 3) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
union_buffered = st_union(buffered_wintin,alameda2)
union_buffered = st_union(buffered_wintin,alameda2)
map_protected = tm_shape(alameda2) + tm_polygons(col = "gray", alpha = 0.01) + tm_borders(col = "black", lwd = 3) +
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
map_protected =
tm_shape(union_buffered) + tm_polygons(col = "green", alpha = 0.5)
map_protected
map_protected = tm_shape(buffered_wintin) + tm_polygons(col = "green", alpha = 0.5)
map_protected
map_protected = tm_shape(alameda2) + tm_polygons(col = "gray") + tm_shape(buffered_wintin) + tm_polygons(col = "green", alpha = 0.5)
map_protected
area_protected = sum(st_area(buffered_wintin))
area_alameda2 = st_area(alameda)
pro_alameda = area_protected/area_alameda2
("Percentage of Alameda area within 1km of protected areas:")
pro_alameda
area_protected = sum(st_area(st_intersection(alameda2,buffered_wintin)))
area_alameda2 = st_area(alameda)
pro_alameda = area_protected/area_alameda2
("Percentage of Alameda area within 1km of protected areas:")
pro_alameda
area_protected = sum(st_area(buffered_wintin))
area_alameda2 = st_area(alameda)
pro_alameda = area_protected/area_alameda2
("Percentage of Alameda area within 1km of protected areas:")
pro_alameda
summary(alameda2)
pop_alameda = alameda2 |>
select(POP2012)
pop_percentage = pro_alameda*pop_alameda
pop_percentage = pro_alameda*float(pop_alameda)
pop_percentage = pro_alameda*as.numeric(pop_alameda)
pop_percentage
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(rvest)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(readxl)
library(tidyverse)
library(rvest)
rm(list = ls())
setwd("/Users/wyattsig/Desktop/Fall/ECNS 491/Assignments/Assignment 4")
mis = read_excel("MIS Beneficiary List - Year 2014-15.xls")
mis1 = mis |>
select(1:11)
a = 0
for(i in 1:length(mis1))              #loop through all of the columns to see what the unique
{                                     # entries are for each column to see what needs to be cleaned
a[i] = mis1 |> count(mis1[i]) |>
filter(n>2) |>
arrange(desc(n))
}
#from looking at the unique entries in "a" from above
#a[[1]] "Sr. No." & a[[2]] "District" don't need cleaning
#a[[3]] "Taluka" & a[[4]] "Village" may need parenthesizes removed
#a[[5]] & a[[6]] don't need cleaning
#a[[7]] to upper
#a[[8]] has NA or "NA" or "0" or "N.A." or "N.A" or "-" all issues in first few entries
#a[[9]] doesn't need cleaning
#a[[10]] to upper, split into tidy
#a[[11]] is clean
#
#use summary to check min max
#use count to see number of unique variables
#potentially try table to see number of duplicate entries
#distinct(across(everything()))
mis1 = mis1 |>                                         #change all of the names to upper case
mutate(`Farmer Name` = toupper(`Farmer Name`),       #and get rid of any entries in the contact no.
`Contact No.` = na_if(`Contact No.`, "N.A"),  #column that aren't full phone numbers
`Contact No.` = na_if(`Contact No.`, "N.A."),
`Contact No.` = na_if(`Contact No.`, "NA"),
`Contact No.` = na_if(`Contact No.`, "0"),
`Contact No.` = na_if(`Contact No.`, "Not Available"),
`Contact No.` = na_if(`Contact No.`, "-"),
Crop = toupper(Crop)
)
mis2 = mis1 |>
separate_rows(Crop,sep = ",")
mis3 = mis2[!duplicated(mis2$`Sr. No.`),]
mis4 = mis3 |>                                 #now that ive found the largest area crop
group_by(Crop) |>                            #I still need to split the dataset into the
summarise(Tarea = sum(`Area (hectare)`)) |>  #type of system used for irrigation
arrange(desc(Tarea))
View(mis4)
View(mis3)
farmers = mis3$`Farmer Name`
a = 0
for(i in 1:length(farmers))              #loop through all of the columns to see what the unique
{                                     # entries are for each column to see what needs to be cleaned
a[i] = mis1 |> count(farmers[i]) |>
filter(n>2) |>
arrange(desc(n))
}
farmers = mis3$`Farmer Name`
a = 0
for(i in 1:length(farmers))              #loop through all of the columns to see what the unique
{                                     # entries are for each column to see what needs to be cleaned
a[i] = mis3 |> count(farmers[i]) |>
filter(n>2) |>
arrange(desc(n))
}
farmers = mis3$`Farmer Name`
entryNumbers = farmers |>
count()
farmers = mis3$`Farmer Name`
entryNumbers = farmers |>
summarise()
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>1)
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2)
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2) |>
arragne(desc(n()))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
filter(n()>=2) |>
arrange(desc(n()))
View(entryNumbers)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n())
filter(n()>=2) |>
arrange(desc(n()))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n())
filter(c>=2) |>
arrange(desc(c))
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n()) |>
filter(c>=2) |>
arrange(desc(c))
View(entryNumbers)
legal = n_distinct(entryNumbers$`Farmer Name`)
illegal = length(entryNumbers) - legal
legal = length(unique(entryNumbers$`Farmer Name`))
illegal = length(entryNumbers) - legal
legal = length(unique(entryNumbers$`Farmer Name`))
illegal = length(entryNumbers) - legal
tot = length(entryNumbers)
tot = length(entryNumbers$`Farmer Name`)
numIllegal = tot - legal
allTotal = length(mis3$`Farmer Name`)
entryNumbers = mis3 |>
group_by(`Farmer Name`) |>
mutate(c = n()) |>
filter(c>=2) |>
arrange(desc(c))
legal = n_distinct(entryNumbers$`Farmer Name`)
tot = length(entryNumbers$`Farmer Name`)
numIllegal = tot - legal
allTotal = length(mis3$`Farmer Name`)
percentFraud = numIllegal/allTotal * 100
percentFraud
cat("Percentage of fraudulent claims = " + percentFraud)
cat("Percentage of fraudulent claims = " + as.string(percentFraud))
cat("Percentage of fraudulent claims = " + as.name(percentFraud))
cat("Percentage of fraudulent claims = " + str(percentFraud))
cat("Percentage of fraudulent claims = " + str(percentFraud))
percentFraud
View(entryNumbers)
View(mis1)
View(mis)
#removing "BEN" and "BHAI" from original dataset
remSuffix = sub("BEN+","",mis1$`Farmer Name`)
remSuffix2 = sub("BHAI","",remSuffix)
remSuffix2 = sub("BHAI+","",remSuffix)
#removing "BEN" and "BHAI" from original dataset
mis2 = mis1
#removing "BEN" and "BHAI" from original dataset
mis9 = mis1
mis9$`Farmer Name` = sub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = sub("BHAI+","",mis9$`Farmer Name`)
View(mis9)
mis9$`Farmer Name` = gsub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = gsub("BHAI+","",mis9$`Farmer Name`)
View(mis9)
#removing "BEN" and "BHAI" from original dataset
mis9 = mis1
mis9$`Farmer Name` = gsub("BEN+","",mis9$`Farmer Name`)
mis9$`Farmer Name` = gsub("BHAI+","",mis9$`Farmer Name`)
entryNumbers2 = mis9 |>                         #Using the cleaned data set
group_by(`Farmer Name`) |>                    #group entries by the farmer name
mutate(c = n()) |>                            #add a column to the data for number of entries for each farmer
filter(c>=2) |>                               #take out any farmers with only one entry
arrange(desc(c))                              #list them in descending order
legal2 = n_distinct(entryNumbers2$`Farmer Name`)#each farmer can have one legal entry, count unique names in "entryNumbers"
tot2 = length(entryNumbers2$`Farmer Name`)      #see how many total entries there are in "entryNumbers"
numIllegal2 = tot2 - legal2                     #find how many duplicate entries after removing their first legal entry
allTotal2 = length(mis9$`Farmer Name`)           #see how many entries are in the original data (cleaned version)
percentFraud2 = numIllegal2/allTotal2 * 100      #divide illegal entries by total to find percentage of fraudulent entries
percentFraud2
fraudDif = percentFraud2 - percentFraud
fraudDif
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(sf)
library(tidyverse)
library(tmap)
#setwd("/Users/wyattsig/Desktop/Fall/ECNS491/Assignments/Assignment7") #set working directory to data location
#dir("data/california_counties")                                       #make sure the path to data is correct
counties = st_read("data/california_counties/CaliforniaCounties.shp") #get county information from file
counties2 = counties |>                                               #set units to Km for continuity with Bart Stations
cbind(area = units::set_units(st_area(counties), km^2))             #not positive if this is necessary for the problem
alameda = counties2 |> filter(NAME == "Alameda")                      #pull map of Alameda county from counties object
stations = st_read("data/bart_stations_2019.geojson")                 #get BART station data from file
stations_5km = st_buffer(stations, dist = 5000)                       #set buffered range to 5km radius
stations_5km_proj = st_transform(stations_5km, st_crs(alameda))       #make sure CRS is the same for county map and stations
sta_5km = st_union(alameda,stations_5km_proj)                         #take the union of the crs corrected stations and
sta_5km_int = st_intersection(alameda, sta_5km)                       #Alameda map, then take the intersection of them?
alameda_join = st_join(alameda,stations_5km_proj)                     #join them together
map_alameda = tm_shape(alameda_join) + tm_borders(col = "black", lwd = 3) +
tm_polygons(col = "pink") + tm_shape(stations_5km_proj) + tm_polygons(col = "blue") + tm_dots()
map_alameda                                                           #create and plot the map object
area_stations = sum(st_area(sta_5km))
area_alameda = st_area(alameda)
bart_alameda = area_stations/area_alameda
("Percentage of Alameda area within 5km of BART stations:")
bart_alameda
source("~/.active-rstudio-document", echo=TRUE)
?lm()
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(homes$SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(houses$SalePrice ~ age + area + age*area + age^2 + area^2)
tmp = lm(houses$SalePrice ~ houses$age + houses$area + houses$age*houses$area + houses$age^2 + houses$area^2)
summary(tmp)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
summary(tmp)
library(tidymodels)
data(ames)
houses = ames %>%
mutate(
id = factor(row_number()),
SalePrice = Sale_Price / 1000,
age = Year_Sold - Year_Built,
area = Gr_Liv_Area
) %>%
select(id, SalePrice, age, area, Lot_Area, TotRms_AbvGrd, Neighborhood)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
tmp = lm(SalePrice ~ age + area + age*area + age^2 + area^2, data = houses)
summary(tmp)
#2
tmp2  = augment(tmp,data = houses)
summary(tmp2)
sd(tmp2$.resid)
View(houses)
View(ames)
tidy(summary(tmp2))
#3
chal = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AnvGrd^2, data = houses)
#3
chal = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
?augment()
source("~/Desktop/Fall/ECNS 491/Assignments/Assignment 8/Assignment8Script.R", echo=TRUE)
sd(my_result$.resid)
View(houses)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2 + , data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2 + , data = houses)
#3
my_linear_model = lm(log(SalePrice) ~ age + area + age*area + age^2 + area^2, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + age^3 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + age^30 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
#3
my_linear_model = lm(SalePrice ~ age + area + Lot_Area + age*area + age^2 + area^2 + age^3 + area^3, data = houses)
my_result = augment(my_linear_model, data = houses)
sd(my_result$.resid)
my_linear_model_2 = lm(SalePrice ~ age + area + age*area + age^2 + area^2 + Lot_Area + TotRms_AbvGrd^2, data = houses)
my_result_2 = augment(my_linear_model_2, data = houses)
sd(my_result_2$.resid)
train_result_1 = augment(linear_model_1, data = houses_train, newdata = houses_test)
set.seed(8)
data_split   = initial_split(houses, prop = 0.75)
houses_train = training(data_split)
houses_test  = testing(data_split)
train_result_1 = augment(linear_model_1, data = houses_train, newdata = houses_test)
sd(train_result_1$.resid)
train_result_2 = augment(my_linear_model, data = houses_train, newdata = houses_test)
sd(train_result_2$.resid)
train_result_3 = augment(my_linear_model_2, data = houses_train, newdata = houses_test)
sd(train_result_3$.resid)
install.packages("readxl")
install.packages("xlxs")
library(xlxs)
library(readxl)
read_xls("fullHistoryGas.xls",sheet = "Data 1")
setwd("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project")
read_xls("fullHistoryGas.xls",sheet = "Data 1")
usAreas = read_xls("fullHistoryGas.xls",sheet = "Data 1")
View(usAreas)
