points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0)
text(30,0,"q = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Inverse Demand", "Monopoly Demand"),
col=c("red", "blue"), lty=1:2)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0)
text(30,0,"q = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Inverse Demand", "Monopoly Demand"),
col=c("red", "blue"), cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0)
text(30,0,"q = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Inverse Demand", "Monopoly Demand"),
col=c("red", "blue"), lty=1:2, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0)
text(30,0,"q = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Inverse Demand", "Monopoly Demand"),
col=c("red", "blue"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0)
text(30,0,"q = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand"),
col=c("red", "blue"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0, col = "green")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0, col = "green")
text(30,0," = 30")
abline(v = 30)
text(2,32,"p = 30")
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0, col = "green")
text(30,0," = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0, col = "green")
text(30,0," = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y)
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 1)
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(v = 60)
abline(h = 60)
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(v = 60)
abline(h = 60)
text(60,0,"q = 60")
text(2,62,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(v = 60)
abline(h = 60)
text(60,0,"q = 60")
text(2,65,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(v = 60)
abline(h = 60)
text(60,0,"q = 60")
text(2,65,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
profits = 1/2*60*60
cat("(a) Profits = ",profits)
q = seq(1,90,1)
p = 90 - q
PS_x = c(60,0,0)
PS_y = c(30,30,90)
p_monopoly = 90 - 2*q
plot(q,p,type = 'l',col = "red")
points(p_monopoly, type = 'l', col = "blue")
polygon(PS_x,PS_y, lty = 2, density = 4)
text(15,45,"Profits")
abline(a = 30, b = 0, col = "green")
text(30,0,"q = 30")
abline(v = 30)
abline(v = 60)
abline(h = 60)
text(60,0,"q = 60")
text(2,65,"p = 60")
legend(60, 90, legend=c("Market Demand", "Monopoly Demand","Marginal Cost"),
col=c("red", "blue","green"), lty=1, cex=0.8)
profits = 1/2*60*60
cat("(a) Profits = $",profits)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
setwd("/Users/wyattsig/Desktop/ECNS 491 Final Project")
states = st_read("USstates/s_22mr22.shp") |>
st_make_valid()
library(readxl)
library(tidyverse)
library(sf)
library(tmap)
states = st_read("USstates/s_22mr22.shp") |>
st_make_valid()
dir("USstates/s_22mr22.shp")
states = st_read("USstates/s_22mr22.shp") |>
st_make_valid()
source("~/.active-rstudio-document", echo=TRUE)
recipe_all |>
skim()
source("~/.active-rstudio-document", echo=TRUE)
model_lm =
linear_reg() |>
set_engine("lm")
ames_cv = ames_train |> vfold_cv(v = 5)
fit_lm_cv =
workflow() |>
add_model(model_lm) |>
add_recipe(recipe_all) |>
fit_resamples(ames_cv)
fit_lm_cv |> collect_metrics()
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, tidymodels, skimr, glmnet, kknn)
data(ames)
set.seed(1)
################################################################################
# Split Data
ames_split = ames |> initial_split(prop = 0.8) #separate data into 80/20 partition
ames_train = ames_split |> training()          #assign training split to ames_train
ames_test  = ames_split |> testing()           #assign testing plit to ames_test
################################################################################
# Set Recipe
recipe_all = recipe(Sale_Price ~.,data= ames_train) |> #create a recipe to clean data
step_dummy(all_nominal_predictors()) |>              #create indicators categorical predictors
step_normalize(all_numeric()) |>                     #normalize numeric variables
step_corr(all_numeric_predictors())                  #remove highly correlated variables
################################################################################
# Clean Data
ames_clean = recipe_all |>                             #apply recipe to data
prep()|>                                             #estimate means for imputation
juice()                                              #apply preprocessing to training data
ames_clean |>                                          #summarize
skim()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
################################################################################
# Set Recipe
recipe_all = recipe(Sale_Price ~.,data= ames_train) |> #create a recipe to clean data
step_dummy(all_nominal_predictors()) |>              #create indicators categorical predictors
step_normalize(all_numeric()) |>                     #normalize numeric variables
step_corr(all_numeric_predictors())                  #remove highly correlated variables
################################################################################
# Clean Data
ames_clean = recipe_all |>                             #apply recipe to data
prep()|>                                             #estimate means for imputation
juice()                                              #apply preprocessing to training data
ames_clean |>                                          #summarize
skim()
################################################################################
# Set Workflow
model_lm = linear_reg() |>                 #create linear model
set_engine("lm")
ames_cv = ames_train |> vfold_cv(v = 5)    #define cross validation parameters
fit_lm_cv = workflow() |>                  #use workflow to apply model and cross validation
add_model(model_lm) |>
add_recipe(recipe_all) |>
fit_resamples(ames_cv)
fit_lm_cv |> collect_metrics()             #check performance
View(ames)
View(ames_clean)
View(ames)
################################################################################
# Part C
model_lasso =                                       #create lasso model
linear_reg(penalty = tune(), mixture = 1) |>
set_engine("glmnet")
lambdas = 10 ^ seq(from = 5, to = -2, length = 1e3) #initialize lambda values for penalties
workflow_lasso = workflow() |>                      #apply model and recipe to data
add_model(model_lasso) |>
add_recipe(recipe_all)
lasso_cv = workflow_lasso |>                        #create cross validation parameters
tune_grid(
ames_cv,
grid = data.frame(penalty = lambdas),
metrics = metric_set(rmse))
lasso_cv |> show_best()                             #see which lambda value works best
autoplot(lasso_cv, metric = "rmse")                 #plot results for lambdas
final_lasso =                                       #select model to use
workflow_lasso |>
finalize_workflow(select_best(lasso_cv, metric = "rmse"))
final_lasso
final_fit_lasso = final_lasso |> last_fit(ames_split) #fit model
final_fit_lasso |> collect_metrics()                  #show RMSE
coefs = final_fit_lasso |>                            #observe estimated coefficients
extract_fit_parsnip() |>
tidy()
coefs_nonzero = coefs |>                              #pull non zero coefficients from
filter(estimate > 0)                                #fitted model
coefs_nonzero
################################################################################
# Part C
model_lasso =                                       #create lasso model
linear_reg(penalty = tune(), mixture = 1) |>
set_engine("glmnet")
lambdas = 10 ^ seq(from = 5, to = -2, length = 1e3) #initialize lambda values for penalties
workflow_lasso = workflow() |>                      #apply model and recipe to data
add_model(model_lasso) |>
add_recipe(recipe_all)
lasso_cv = workflow_lasso |>                        #create cross validation parameters
tune_grid(
ames_cv,
grid = data.frame(penalty = lambdas),
metrics = metric_set(rmse))
lasso_cv |> show_best()                             #see which lambda value works best
autoplot(lasso_cv, metric = "rmse")                 #plot results for lambdas
final_lasso =                                       #select model to use
workflow_lasso |>
finalize_workflow(select_best(lasso_cv, metric = "rmse"))
final_lasso
final_fit_lasso = final_lasso |> last_fit(ames_split) #fit model
final_fit_lasso |> collect_metrics()                  #show RMSE
coefs = final_fit_lasso |>                            #observe estimated coefficients
extract_fit_parsnip() |>
tidy()
coefs_nonzero = coefs |>                              #pull non zero coefficients from
filter(estimate > 0)                                #fitted model
coefs_nonzero
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(data_initial)
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(ames_split)
final_fit_net |>
collect_metrics()
coefs2 =
final_fit_net |>
extract_fit_parsnip() |>
tidy()
coefs_non_zero2 =
coefs2 |>
filter(estimate > 0)
coefs2_non_zero
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(ames_split)
final_fit_net |>
collect_metrics()
coefs2 =
final_fit_net |>
extract_fit_parsnip() |>
tidy()
coefs_non_zero2 =
coefs2 |>
filter(estimate > 0)
coefs_non_zero2
setwd("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project")
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
View(CA_data)
View(allGrades_all)
View(allGrades_all)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 1) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 9)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 9)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 5)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3,xlim = range(2000,2022)) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
