set_engine("glmnet")
lambdas = 10 ^ seq(from = 5, to = -2, length = 1e3) #initialize lambda values for penalties
workflow_lasso = workflow() |>                      #apply model and recipe to data
add_model(model_lasso) |>
add_recipe(recipe_all)
lasso_cv = workflow_lasso |>                        #create cross validation parameters
tune_grid(
ames_cv,
grid = data.frame(penalty = lambdas),
metrics = metric_set(rmse))
lasso_cv |> show_best()                             #see which lambda value works best
autoplot(lasso_cv, metric = "rmse")                 #plot results for lambdas
final_lasso =                                       #select model to use
workflow_lasso |>
finalize_workflow(select_best(lasso_cv, metric = "rmse"))
final_lasso
final_fit_lasso = final_lasso |> last_fit(ames_split) #fit model
final_fit_lasso |> collect_metrics()                  #show RMSE
coefs = final_fit_lasso |>                            #observe estimated coefficients
extract_fit_parsnip() |>
tidy()
coefs_nonzero = coefs |>                              #pull non zero coefficients from
filter(estimate > 0)                                #fitted model
coefs_nonzero
################################################################################
# Part C
model_lasso =                                       #create lasso model
linear_reg(penalty = tune(), mixture = 1) |>
set_engine("glmnet")
lambdas = 10 ^ seq(from = 5, to = -2, length = 1e3) #initialize lambda values for penalties
workflow_lasso = workflow() |>                      #apply model and recipe to data
add_model(model_lasso) |>
add_recipe(recipe_all)
lasso_cv = workflow_lasso |>                        #create cross validation parameters
tune_grid(
ames_cv,
grid = data.frame(penalty = lambdas),
metrics = metric_set(rmse))
lasso_cv |> show_best()                             #see which lambda value works best
autoplot(lasso_cv, metric = "rmse")                 #plot results for lambdas
final_lasso =                                       #select model to use
workflow_lasso |>
finalize_workflow(select_best(lasso_cv, metric = "rmse"))
final_lasso
final_fit_lasso = final_lasso |> last_fit(ames_split) #fit model
final_fit_lasso |> collect_metrics()                  #show RMSE
coefs = final_fit_lasso |>                            #observe estimated coefficients
extract_fit_parsnip() |>
tidy()
coefs_nonzero = coefs |>                              #pull non zero coefficients from
filter(estimate > 0)                                #fitted model
coefs_nonzero
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(data_initial)
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(ames_split)
final_fit_net |>
collect_metrics()
coefs2 =
final_fit_net |>
extract_fit_parsnip() |>
tidy()
coefs_non_zero2 =
coefs2 |>
filter(estimate > 0)
coefs2_non_zero
################################################################################
# Part D
model_net = linear_reg(penalty = tune(), mixture = tune()) |>
set_engine("glmnet")
workflow_net = workflow() |>
add_recipe(recipe_all) |>
add_model(model_net)
cv_net =
workflow_net |>
tune_grid(
ames_cv,
grid = grid_regular(mixture(), penalty(), levels=5:5),
metrics = metric_set(rmse))
final_net =
workflow_net |>
finalize_workflow(select_best(cv_net,metric = "rmse"))
final_net
final_fit_net =
final_net|>
last_fit(ames_split)
final_fit_net |>
collect_metrics()
coefs2 =
final_fit_net |>
extract_fit_parsnip() |>
tidy()
coefs_non_zero2 =
coefs2 |>
filter(estimate > 0)
coefs_non_zero2
setwd("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project")
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
View(CA_data)
View(allGrades_all)
View(allGrades_all)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 1) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 9)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 9)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 5)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3,xlim = range(2000,2022)) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
plot(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6)
ggplot(data=states, aes(x=long, y=lat, group=group)) +
geom_polygon(color = "white", fill = "light green") +
guides(fill="none") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ggtitle('U.S. Map with States') +
coord_fixed(1.3)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
View(regular_conventional)
reformulated_vs_conventional = regular_conventional |>
select(1:2)
View(reformulated_vs_conventional)
reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
rename(conventional = reformulated_vs_conventional[,2])
reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
rename(conventional = 'Weekly U.S. Regular Conventional Retail Gasoline Prices (Dollars Per Gallon)')
?rename()
reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
rename(conventional = .cols = 2)
reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
rename(conventional, .cols = 2)
reformulated_vs_conventional = regular_conventional |>
select(1:2)
reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
inner_join(regular_reformulated |> select(1:2))
View(reformulated_vs_conventional)
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = row(2:3))) +
geom_line()
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = index(2))) +
geom_line()
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`)) +
geom_line()
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`),col = "red") +
geom_line() +
geom_line(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`))
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`))
ggplot(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = reformulated_vs_conventional, aes(x = Date, y = reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
reg_reformulated_vs_conventional = regular_conventional |>
select(1:2) |>
inner_join(regular_reformulated |> select(1:2))
ggplot(data = reg_reformulated_vs_conventional, aes(x = Date, y = reg_reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional, aes(x = Date, y = reg_reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
mid_reformulated_vs_conventional = midgrade_conventional |>
select(1:2) |>
inner_join(midgrade_reformulated |> select(1:2))
ggplot(data = pre_reformulated_vs_conventional, aes(x = Date, y = pre_reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional, aes(x = Date, y = pre_reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
ggplot(data = mid_reformulated_vs_conventional, aes(x = Date, y = mid_reformulated_vs_conventional$`Weekly U.S. Regular Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = mid_reformulated_vs_conventional, aes(x = Date, y = mid_reformulated_vs_conventional$`Weekly U.S. Regular Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
pre_reformulated_vs_conventional = premuim_conventional |>
select(1:2) |>
inner_join(premuim_reformulated |> select(1:2))
pre_reformulated_vs_conventional = premium_conventional |>
select(1:2) |>
inner_join(premium_reformulated |> select(1:2))
ggplot(data = mid_reformulated_vs_conventional, aes(x = Date, y = mid_reformulated_vs_conventional$`Weekly U.S. Midgrade Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = mid_reformulated_vs_conventional, aes(x = Date, y = mid_reformulated_vs_conventional$`Weekly U.S. Midgrade Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
ggplot(data = pre_reformulated_vs_conventional, aes(x = Date, y = pre_reformulated_vs_conventional$`Weekly U.S. Premium Conventional Retail Gasoline Prices  (Dollars per Gallon)`,col = "red")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional, aes(x = Date, y = pre_reformulated_vs_conventional$`Weekly U.S. Premium Reformulated Retail Gasoline Prices  (Dollars per Gallon)`,col = "blue"))
columnNames = c("Date","Conventional","Reformulated")
View(reg_reformulated_vs_conventional)
colnames(reg_reformulated_vs_conventional) = columnNames
colnames(pre_reformulated_vs_conventional) = columnNames
colnames(mid_reformulated_vs_conventional) = columnNames
ggplot(data = reg_reformulated_vs_conventional, aes(x = Date, y = Conventional,col = "red")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional, aes(x = Date, y = Regular,col = "blue"))
ggplot(data = reg_reformulated_vs_conventional, aes(x = Date, y = Conventional,col = "red")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional, aes(x = Date, y = Reformulated,col = "blue"))
ggplot(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "blue"))
ggplot(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated"))
ggplot(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Regular") +
theme_classic()
ggplot(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Midgrade") +
theme_classic()
ggplot(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Premium") +
theme_classic()
reg_conv_vs_ref_plot =
ggplot(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Regular") +
theme_classic()
mid_conv_vs_ref_plot =
ggplot(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Midgrade") +
theme_classic()
pre_conv_vs_ref_plot =
ggplot(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Premium") +
theme_classic()
install.packages("patchwork")
library(patchwork)
reg_conv_vs_ref_plot+mid_conv_vs_ref_plot+pre_conv_vs_ref_plot
reg_conv_vs_ref_plot/mid_conv_vs_ref_plot/pre_conv_vs_ref_plot
reg_vs_mid_vs_pre = regular_all |>
select(1:2) |>
inner_join(midgrade_all |> select(1:2)) |>
inner_join(premium_all |> select(1:2))
colnames(reg_vs_mid_vs_pre) = columnNames2
columnNames2 = c("Regular","Midgrade","Premium")
colnames(reg_vs_mid_vs_pre) = columnNames2
reg_vs_mid_vs_pre_plot =
ggplot(data = reg_conv_vs_ref_plot,
aes(x = Date,
y = Regular,
col = "Regular")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Midgrade,
col = "Midgrade")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Premium,
col = "Premium")) +
ggtitle("Regular vs. Midgrade vs. Premium") +
theme_classic()
reg_vs_mid_vs_pre_plot =
ggplot(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Regular,
col = "Regular")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Midgrade,
col = "Midgrade")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Premium,
col = "Premium")) +
ggtitle("Regular vs. Midgrade vs. Premium") +
theme_classic()
reg_conv_vs_ref_plot
reg_vs_mid_vs_pre_plot
columnNames2 = c("Date","Regular","Midgrade","Premium")
colnames(reg_vs_mid_vs_pre) = columnNames2
reg_vs_mid_vs_pre_plot =
ggplot(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Regular,
col = "Regular")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Midgrade,
col = "Midgrade")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Premium,
col = "Premium")) +
ggtitle("Regular vs. Midgrade vs. Premium") +
theme_classic()
reg_vs_mid_vs_pre_plot
reg_vs_mid_vs_pre_plot =
ggplot(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Regular,
col = "Regular")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Midgrade,
col = "Midgrade")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Premium,
col = "Premium")) +
ggtitle("Regular vs. Midgrade vs. Premium") +
theme_classic() +
scale_color_manual(breaks = c("8", "6", "4"),
values=c("red", "blue", "green"))
reg_vs_mid_vs_pre_plot
reg_vs_mid_vs_pre_plot =
ggplot(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Regular,
col = "Regular")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Midgrade,
col = "Midgrade")) +
geom_line() +
geom_line(data = reg_vs_mid_vs_pre,
aes(x = Date,
y = Premium,
col = "Premium")) +
ggtitle("Regular vs. Midgrade vs. Premium") +
theme_classic()
reg_vs_mid_vs_pre_plot
reg_conv_vs_ref_plot =
ggplot(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = reg_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Regular") +
scale_y_discrete(name = "$/gal") +
theme_classic()
mid_conv_vs_ref_plot =
ggplot(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = mid_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Midgrade") +
scale_y_discrete(name = "$/gal") +
theme_classic()
pre_conv_vs_ref_plot =
ggplot(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Premium") +
scale_y_discrete(name = "$/gal") +
theme_classic()
reg_conv_vs_ref_plot/mid_conv_vs_ref_plot/pre_conv_vs_ref_plot
pre_conv_vs_ref_plot =
ggplot(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Conventional,
col = "Conventional")) +
geom_line() +
geom_line(data = pre_reformulated_vs_conventional,
aes(x = Date,
y = Reformulated,
col = "Reformulated")) +
ggtitle("Premium") +
scale_y_discrete(name = "$/gal",limits = c(0,7)) +
theme_classic()
reg_conv_vs_ref_plot/mid_conv_vs_ref_plot/pre_conv_vs_ref_plot
plot(allGrades_all$Date,allGrades_all$`Weekly U.S. All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', ylim = range(0,7), col = 1, xlab = "Date",ylab = "Price") +
points(allGrades_all$Date,allGrades_all$`Weekly California All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 2) +
points(allGrades_all$Date,allGrades_all$`Weekly Colorado All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 3) +
points(allGrades_all$Date,allGrades_all$`Weekly Florida All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 4) +
points(allGrades_all$Date,allGrades_all$`Weekly Massachusetts All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 5) +
points(allGrades_all$Date,allGrades_all$`Weekly Minnesota All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 6) +
points(allGrades_all$Date,allGrades_all$`Weekly New York All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 7) +
points(allGrades_all$Date,allGrades_all$`Weekly Ohio All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 8) +
points(allGrades_all$Date,allGrades_all$`Weekly Texas All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 9) +
points(allGrades_all$Date,allGrades_all$`Weekly Washington All Grades All Formulations Retail Gasoline Prices  (Dollars per Gallon)`, type = 'l', col = 10)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
source("~/Documents/GitHub/ECNS491.project/ECNS 491 Final Project/Exploritory.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
################################################################################
# Import and Clean data with readxls() parameters
library(readxl)
regular_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 1", col_types = c("date",rep("numeric",20)),skip = 2)
regular_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 2", col_types = c("date",rep("numeric",18)),skip = 2)
regular_all = read_xls("fullHistoryGas.xls",sheet = "Data 3", col_types = c("date",rep("numeric",28)),skip = 2)
midgrade_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 4", col_types = c("date",rep("numeric",20)),skip = 2)
midgrade_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 5", col_types = c("date",rep("numeric",18)),skip = 2)
midgrade_all = read_xls("fullHistoryGas.xls",sheet = "Data 6", col_types = c("date",rep("numeric",28)),skip = 2)
premium_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 7", col_types = c("date",rep("numeric",20)),skip = 2)
premium_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 8", col_types = c("date",rep("numeric",18)),skip = 2)
premium_all = read_xls("fullHistoryGas.xls",sheet = "Data 9", col_types = c("date",rep("numeric",28)),skip = 2)
allGrades_conventional = read_xls("fullHistoryGas.xls",sheet = "Data 10", col_types = c("date",rep("numeric",20)),skip = 2)
allGrades_reformulated = read_xls("fullHistoryGas.xls",sheet = "Data 11", col_types = c("date",rep("numeric",18)),skip = 2)
allGrades_all = read_xls("fullHistoryGas.xls",sheet = "Data 12", col_types = c("date",rep("numeric",28)),skip = 2)
################################################################################
reg_conv_vs_ref_plot/mid_conv_vs_ref_plot/pre_conv_vs_ref_plot
